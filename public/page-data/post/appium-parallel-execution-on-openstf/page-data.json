{"componentChunkName":"component---src-templates-post-js","path":"/post/appium-parallel-execution-on-openstf/","result":{"data":{"post":{"id":"f2092006-1c52-53d8-a413-13a224e26e8a","title":"Appium Parallel Execution on OpenSTF","date":"August 07, 2016","excerpt":"In the last  post , we have seen how to execute appium tests in parallel using Selenium Grid. In this post, I'm going to show you how we can…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Appium Parallel Execution on OpenSTF\",\n  \"date\": \"2016-08-07T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the last \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../appium-parallel-execution-using-testng\"\n  }), \"post\"), \", we have seen how to execute appium tests in parallel using Selenium Grid. In this post, I\\u2019m going to show you how we can use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://openstf.io/\"\n  }), \"OpenSTF\"), \", a Smartphone Test Farm - open source tool and execute our tests in parallel.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"First clone this repo\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git clone https://github.com/email2vimalraj/appium-stf-example.git\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Now let\\u2019s setup the required tools\"), \":\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://github.com/openstf/stf\"\n  }), \"OpenSTF\"), \" - Kindly follow the github instructions to install the openstf in your local machine\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"http://appium.io\"\n  }), \"Appium\"), \" - Download and install as per the documentation\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://maven.apache.org/\"\n  }), \"Maven\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Running test\"), \":\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make sure your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stf\"), \" is running.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Generate the Access Token from your \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stf\"), \" settings page and copy it to your clipboard. (Settings > Keys > + > Give some title > Generate New Token).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/test/java/com/vimalselvam/stf/AndroidTest\"), \" and change the following:\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"STF_SERVICE_URL\"), \" to your actual STF URL.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ACCESS_TOKEN\"), \" to the copied access token from the step #2.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Update \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"parallelDp\"), \" data provider method to the list of device serial ids connected to your machine.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"From terminal, \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cd\"), \" to the cloned directory and run \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"mvn clean test\"), \".\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Demo\"), \":\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.youtube.com/watch?v=ZM1FZxokbZ4\",\n    \"title\": \"Appium Parallel Execution on OpenSTF\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"http://img.youtube.com/vi/ZM1FZxokbZ4/0.jpg\",\n    \"alt\": \"Appium Parallel Execution on OpenSTF\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"f2092006-1c52-53d8-a413-13a224e26e8a","excerpt":"In the last  post , we have seen how to execute appium tests in parallel using Selenium Grid. In this post, I'm going to show you how we can…","slug":"/appium-parallel-execution-on-openstf/","title":"Appium Parallel Execution on OpenSTF","date":"August 07, 2016","parent":{"parent":{"relativeDirectory":"appium-parallel-execution-on-openstf"}},"relativeDirectory":"appium-parallel-execution-on-openstf"}}}