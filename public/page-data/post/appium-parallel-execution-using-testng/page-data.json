{"componentChunkName":"component---src-templates-post-js","path":"/post/appium-parallel-execution-using-testng/","result":{"data":{"post":{"id":"a066562e-45ea-58b5-9624-fabef4bc98dd","title":"Appium Parallel Execution using TestNG","slug":"/appium-parallel-execution-using-testng/","date":"July 24, 2016","excerpt":"This is the follow-up post on the  Selenium Grid for Appium mobile automation . Continuing from the example, I hope you have grid hub…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Appium Parallel Execution using TestNG\",\n  \"description\": \"Setting up the appium to execute tests parallely using TestNG and Selenium Grid\",\n  \"date\": \"2016-07-24T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"This is the follow-up post on the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../selenium-grid-for-appium-mobile-automation\"\n  }), \"Selenium Grid for Appium mobile automation\"), \".\"), mdx(\"p\", null, \"Continuing from the example, I hope you have grid hub running with two various appium nodes which has unique \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"applicationName\"), \".\"), mdx(\"p\", null, \"This post will focus on showing you on how we execute same tests across multiple devices in parallel. Because, often as test engineers, we have to sign-off our tests in various mobile platforms and devices. Let\\u2019s get into action.\"), mdx(\"p\", null, \"Create a TestNG class as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"package com.vimalselvam.appium;\\n\\nimport io.appium.java_client.MobileBy;\\nimport io.appium.java_client.android.AndroidDriver;\\nimport io.appium.java_client.remote.MobileCapabilityType;\\nimport org.openqa.selenium.remote.DesiredCapabilities;\\nimport org.testng.annotations.*;\\n\\nimport java.net.MalformedURLException;\\nimport java.net.URL;\\n\\npublic class AppiumTest {\\n\\n private AndroidDriver driver;\\n private String applicationName;\\n\\n @Factory(dataProvider = \\\"parallelDp\\\")\\n public AppiumTest(String applicationName) {\\n   this.applicationName = applicationName;\\n }\\n\\n @DataProvider(name = \\\"parallelDp\\\")\\n public static Object[][] parallelDp() {\\n   return new Object[][] {\\n     {\\\"Samsung S4\\\"},\\n     {\\\"Samsung S5\\\"}\\n   };\\n }\\n\\n @BeforeClass\\n public void setup() throws MalformedURLException {\\n   DesiredCapabilities desiredCapabilities = new DesiredCapabilities();\\n   desiredCapabilities.setCapability(MobileCapabilityType.DEVICE_NAME, \\\"ANDROID\\\");\\n   desiredCapabilities.setCapability(MobileCapabilityType.PLATFORM_NAME, \\\"ANDROID\\\");\\n   desiredCapabilities.setCapability(\\\"applicationName\\\", this.applicationName);\\n   desiredCapabilities.setCapability(MobileCapabilityType.APP, \\\"https://github.com/appium/java-client/raw/master/src/test/java/io/appium/java_client/ApiDemos-debug.apk\\\");\\n   driver = new AndroidDriver(new URL(\\\"http://127.0.0.1:4444/wd/hub\\\"), desiredCapabilities);\\n }\\n\\n @Test\\n public void launchTest() throws InterruptedException {\\n   System.err.println(\\\"Thread id: \\\" + Thread.currentThread().getId());\\n   Thread.sleep(10000);\\n }\\n\\n @Test(dependsOnMethods = {\\\"launchTest\\\"})\\n public void clickTest() {\\n   driver.findElementById(\\\"android:id/content\\\")\\n   .findElement(MobileBy.AccessibilityId(\\\"Graphics\\\")).click();\\n }\\n\\n @AfterClass\\n public void teardown() {\\n   if (driver != null) {\\n     driver.quit();\\n   }\\n }\\n}\\n\")), mdx(\"p\", null, \"Note here, I\\u2019ve created a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Factory\"), \" constructor with the data provider called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parallelDp\"), \". Refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://testng.org/doc/documentation-main.html#factories\"\n  }), \"here\"), \" for more about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@Factory\"), \". The data provider method produces two String objects of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"applicationName\"), \" which are the same as that I had created during my appium node configuration. Make sure the applicationName here are matches with your node configurations.\"), mdx(\"p\", null, \"I am sure you don\\u2019t want me to explain the rest of the test code which simply explains by itself. Let\\u2019s move on.\"), mdx(\"p\", null, \"Now create your TestNG Suite xml file as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<!DOCTYPE suite SYSTEM \\\"http://testng.org/testng-1.0.dtd\\\">\\n<suite name=\\\"Test\\\" verbose=\\\"1\\\" data-provider-thread-count=\\\"2\\\" thread-count=\\\"2\\\" parallel=\\\"classes\\\">\\n  <test name=\\\"TestClass\\\" thread-count=\\\"2\\\" parallel=\\\"instances\\\">\\n    <classes>\\n      <class name=\\\"com.vimalselvam.appium.AppiumTest\\\" />\\n    </classes>\\n  </test>\\n</suite>\\n\")), mdx(\"p\", null, \"I\\u2019ve set the suite parallel attribute as classes, so that it will create two instances of my test class in parallel as specified in my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"thread-count\"), \". That\\u2019s it, execute and see the magic in the below video.\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.youtube.com/watch?v=Gza3k5BTn9g\",\n    \"title\": \"Appium Parallel Execution\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"http://img.youtube.com/vi/Gza3k5BTn9g/0.jpg\",\n    \"alt\": \"Appium Parallel Execution\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a066562e-45ea-58b5-9624-fabef4bc98dd","excerpt":"This is the follow-up post on the  Selenium Grid for Appium mobile automation . Continuing from the example, I hope you have grid hub…","slug":"/appium-parallel-execution-using-testng/","title":"Appium Parallel Execution using TestNG","date":"July 24, 2016","parent":{"parent":{"relativeDirectory":"appium-parallel-execution-using-testng"}},"relativeDirectory":"appium-parallel-execution-using-testng"}}}