{"componentChunkName":"component---src-templates-post-js","path":"/post/deploying-graphql-server-on-heroku/","result":{"data":{"post":{"id":"e62f44f4-4098-53bb-aa95-b12483daaf32","title":"Deploying GraphQL Server on Heroku","date":"February 07, 2018","excerpt":"Today, I'll show you on how to deploy a simple Graphql server on Heroku. I'm considering the following stack to show my example: Mongoâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Deploying GraphQL Server on Heroku\",\n  \"date\": \"2018-02-07T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today, I\\u2019ll show you on how to deploy a simple Graphql server on Heroku. I\\u2019m considering the following stack to show my example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Mongo (using \", mdx(\"strong\", null, \"mongoose\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Express\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"GraphQL (using \", mdx(\"strong\", null, \"apollo-server\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"NodeJS server\")), mdx(\"p\", null, \"A sample GraphQL server look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import express from 'express'\\nimport bodyParser from 'body-parser'\\nimport { graphqlExpress, graphiqlExpress } from 'apollo-server-express'\\nimport { makeExecutableSchema } from 'graphql-tools'\\n\\nimport { connectToDB } from './database'\\n\\n// Start the http server\\nconst startServer = async () => {\\n  const { User } = require('./database/models')\\n\\n  // GraphQL Types\\n  const typeDefs = `\\n    type User {\\n      _id: ID!\\n      name: String\\n      password: String\\n    }\\n\\n    type Query {\\n      users: [User]\\n    }\\n\\n    type Mutation {\\n      addUser(input: UserInput): User\\n    }\\n\\n    input UserInput {\\n      name: String!\\n      password: String!\\n    }\\n  `\\n\\n  // GraphQL resolvers\\n  const resolvers = {\\n    Query: {\\n      users: async () => {\\n        const res = await User.find()\\n        return res\\n      }\\n    },\\n\\n    Mutation: {\\n      addUser: async (root, args) => {\\n        const res = await User.create(args.input)\\n        return res\\n      }\\n    }\\n  }\\n\\n  // Define a schema\\n  const schema = makeExecutableSchema({\\n    typeDefs,\\n    resolvers\\n  })\\n\\n  // Initiate express and define routes\\n  const app = express()\\n  app.use('/graphql', bodyParser.json(), graphqlExpress({ schema }))\\n  app.use('/', graphiqlExpress({ endpointURL: '/graphql' }))\\n\\n  // Initiate the server\\n  app.listen(process.env.PORT || 3000, () => {\\n    console.log(`Server started on port: ${process.env.PORT || 3000}`)\\n  })\\n}\\n\\n// Connecting to DB and then start the server\\nconst dbConnectAndStartServer = async () => {\\n  try {\\n    await connectToDB()\\n    console.log('Connected to Mongo successfully')\\n    startServer()\\n  } catch (err) {\\n    console.error(`Error connecting to mongo - ${err.message}`)\\n    process.exit(1)\\n  }\\n}\\n\\n// Entry point\\ndbConnectAndStartServer()\\n\")), mdx(\"p\", null, \"I have one Mutation which is used to add an user to the mongo collection and one Query which is used to query all the users from the mongo collection.\"), mdx(\"p\", null, \"My \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"database.js\"), \" looks like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const { Mongoose } = require('mongoose')\\n\\nlet connection = null\\n\\nconst connectToDB = async () => {\\n  const mongoose = new Mongoose()\\n  mongoose.Promise = global.Promise\\n\\n  let mongoUserCredentials = ''\\n  if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {\\n    mongoUserCredentials = `${process.env.MONGO_USER}:${process.env.MONGO_PASSWORD}@`\\n  }\\n\\n  const MONGO_URL = process.env.MONGO_URL || 'localhost:27017'\\n  const DB_NAME = process.env.MONGO_DB_NAME || 'sample-db'\\n  const MONGO_CONNECTION_STRING = `mongodb://${mongoUserCredentials}${MONGO_URL}/${DB_NAME}`\\n\\n  await mongoose.connect(MONGO_CONNECTION_STRING)\\n  connection = mongoose\\n}\\n\\nconst getDB = () => {\\n  if (!connection) {\\n    throw new Error('Call connectToDB first')\\n  }\\n  return connection\\n}\\n\\nmodule.exports = {\\n  connectToDB,\\n  getDB\\n}\\n\")), mdx(\"p\", null, \"I\\u2019m taking few inputs through the environment variables because I\\u2019ll be using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mLab mongodb\"), \" for the heroku deployment.\"), mdx(\"p\", null, \"You can download the entire source code from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/graphql-heroku\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Let\\u2019s start deploying our GraphQL server on Heroku now.\"), mdx(\"h1\", {\n    \"id\": \"pre-requisites\"\n  }, \"Pre-requisites\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should have the Heroku account.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You should have the Heroku cli installed. Download from \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://devcenter.heroku.com/articles/heroku-cli\"\n  }), \"here\"), \".\")), mdx(\"h1\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"Go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dashboard.heroku.com/apps\"\n  }), \"heroku dashboard\"), \" by logging in.\"), mdx(\"p\", null, \"You will see something like this:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"420px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/3b243/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"8.30078125%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundImage\": \"url('data:image/svg+xml,%3csvg%20xmlns=\\\\'http://www.w3.org/2000/svg\\\\'%20width=\\\\'400\\\\'%20height=\\\\'33\\\\'/%3e')\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"Heroku dashboard\",\n    \"title\": \"Heroku dashboard\",\n    \"src\": \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/635b1/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png\",\n    \"srcSet\": [\"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/759d4/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 105w\", \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/6a467/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 210w\", \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/635b1/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 420w\", \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/b2a12/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 630w\", \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/04a72/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 840w\", \"/static/9a2b1aec6d33c495220bc1fd7ca0d5ff/3b243/Screen-Shot-2018-02-06-at-11.23.52-PM-1024x85.png 1024w\"],\n    \"sizes\": \"(max-width: 420px) 100vw, 420px\",\n    \"loading\": \"lazy\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"Click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"New\"), \" from the right side and click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Create New App\"), \".\"), mdx(\"p\", null, \"Enter the app name. In my case, I\\u2019ve entered as graphql-heroku. You may not get the same name since I\\u2019ve already taken. :D\"), mdx(\"p\", null, \"Click on Create app button.\"), mdx(\"p\", null, \"Once your app is created, goto \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Resources\"), \" tab and search for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mLab MongoDB\"), \".\\nIn the popup, select \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Sandbox - Free\"), \" and click on Provision. Once provisioned successfully, you can see something like this:\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.vimalselvam.com/wp-content/uploads/2018/02/Screen-Shot-2018-02-06-at-11.36.29-PM.png\",\n    \"alt\": \"Successful provision\"\n  }))), mdx(\"p\", null, \"Click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mLab MongoDB :: Mongodb\"), \" which will open up a mLab console on a new tab.\"), mdx(\"p\", null, \"Click on \", mdx(\"strong\", null, \"Users\"), \" tab and click on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Add Database User\"), \" button to create a new database user. Set a user name and password to access the mongodb database. Kindly note the following items:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Username\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Password\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DB Hostname\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DB port number\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"DB name\")), mdx(\"p\", null, \"Now go back to your heroku dashboard.\"), mdx(\"p\", null, \"Open up your terminal in your local machine and type as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"heroku login\\n\")), mdx(\"p\", null, \"Follow the prompts to create your SSH public key and login to heroku.\"), mdx(\"p\", null, \"Then set the following environment configs:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"heroku config:set NPM_CONFIG_PRODUCTION=false -a <<<app name>>>\\nheroku config:set MONGO_USER=<<<db user name>>> -a <<<app name>>>\\nheroku config:set MONGO_PASSWORD=<<<db password>>> -a <<<app name>>>\\nheroku config:set MONGO_URL=<<<mongo host name>>>:<<<mongo port number>>> -a <<<app name>>>\\nheroku config:set MONGO_DB_NAME=<<<mongo db name>>> -a <<<app name>>>\\n\")), mdx(\"p\", null, \"Ufff!!! Too many configs right! That\\u2019s fine, it is an one-time setup.\"), mdx(\"p\", null, \"Finally, run if you have an existing git repository:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"heroku git:remote -a <<<app name>>>\\n\")), mdx(\"p\", null, \"If not:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"cd <<<project directory>>>\\ngit init\\nheroku git:remote -a <<<app name>>>\\ngit add .\\ngit commit -m \\\"Ready to serve GraphQL\\\"\\n\")), mdx(\"p\", null, \"Now we are going to deploy our GraphQL server. Sit tight!\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git push heroku master\\n\")), mdx(\"p\", null, \"You should see the build happening in your terminal and at the end you see something like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"remote: -----> Launching...\\n...\\nremote:        https://graphql-heroku.herokuapp.com/ deployed to Heroku\\nremote:\\nremote: Verifying deploy... done.\\nTo https://git.heroku.com/graphql-heroku.git\\n * [new branch]      master -> master\\n\")), mdx(\"p\", null, \"Great! Our graphql server is successfully deployed on Heroku. So if you hit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql-heroku.herokuapp.com/\"\n  }), \"https://graphql-heroku.herokuapp.com/\"), \" in your browser, you can see the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphiQL\"), \" launching.\"), mdx(\"p\", null, \"To create a new user, execute the following in GraphiQL:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"mutation addUser {\\n  addUser(input: { name: \\\"Vimal\\\", password: \\\"secret\\\" }) {\\n    name\\n    password\\n  }\\n}\\n\")), mdx(\"p\", null, \"and to query the list of users, you can execute the following:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query Users {\\n  users {\\n    name\\n    password\\n  }\\n}\\n\")), mdx(\"p\", null, \"Hurray! We have successfully deployed in Heroku and the GraphQL server along with GraphiQL interface can be shared across any one in the world.\"), mdx(\"p\", null, \"If you like this post, kindly hit the STAR button and share it.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"e62f44f4-4098-53bb-aa95-b12483daaf32","excerpt":"Today, I'll show you on how to deploy a simple Graphql server on Heroku. I'm considering the following stack to show my example: Mongoâ€¦","slug":"/deploying-graphql-server-on-heroku/","title":"Deploying GraphQL Server on Heroku","date":"February 07, 2018","parent":{"parent":{"relativeDirectory":"deploying-graphql-server-on-heroku"}},"relativeDirectory":"deploying-graphql-server-on-heroku"}}}