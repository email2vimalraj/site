{"componentChunkName":"component---src-templates-post-js","path":"/post/form-in-modal-using-react-hooks-mistakes-and-lesson-learnt/","result":{"data":{"post":{"id":"a0356db0-53a5-5f78-9bee-4d100fdef867","title":"Form in Modal using React hooks - mistakes and lesson learnt","slug":"/form-in-modal-using-react-hooks-mistakes-and-lesson-learnt/","date":"April 08, 2019","excerpt":"Recently, I’ve stumbled upon a problem while building a  Form  in the  Modal  box. I would like to share that experience and believe it…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Form in Modal using React hooks - mistakes and lesson learnt\",\n  \"date\": \"2019-04-08T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Recently, I\\u2019ve stumbled upon a problem while building a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Form\"), \" in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" box. I would like to share that experience and believe it might help.\"), mdx(\"h2\", {\n    \"id\": \"modal-and-portals\"\n  }, \"Modal and Portals\"), mdx(\"p\", null, \"I wanted to create a modal which can show some content or the form. The best way to create a modal in React is to use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/portals.html\"\n  }), \"Portal\"), \". Because, the modal should always be a individual component outside the DOM hierarchy. The Portal let you do this. Kindly read through the react\\u2019s documentation to know more about the Portal and the benefits. Additionally, this \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.nearform.com/blog/exploring-react-portals/\"\n  }), \"post\"), \" might help you to understand better.\"), mdx(\"p\", null, \"So, we know what is Portal! Let\\u2019s build our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" component and render as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \". I\\u2019m using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://facebook.github.io/create-react-app/\"\n  }), \"create-react-app\"), \" CLI tool to generate my react project. Before creating the portal, let\\u2019s make sure our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"./public/index.html\"), \" has the outer DOM hierarchy.\"), mdx(\"p\", null, \"Before:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<body>\\n  <noscript>\\n    You need to enable JavaScript to run this app.\\n  </noscript>\\n  <div id=\\\"root\\\"></div>\\n</body>\\n\")), mdx(\"p\", null, \"After:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<body>\\n  <noscript>\\n    You need to enable JavaScript to run this app.\\n  </noscript>\\n  <div id=\\\"root\\\"></div>\\n  <div id=\\\"modal-root\\\"></div>\\n</body>\\n\")), mdx(\"p\", null, \"I\\u2019ve added another \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" with the value of id attribute as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modal-root\"), \". That is where we render all our modals.\"), mdx(\"p\", null, \"Let\\u2019s create our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" component with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \" support. I\\u2019ve created this under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"components/modal/index.js\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import React, { useEffect } from \\\"react\\\";\\nimport { createPortal } from \\\"react-dom\\\";\\nimport { StyledModal } from \\\"./style\\\";\\n\\n// Creates a portal outside the DOM hierarchy\\nfunction Portal({ children }) {\\n  const modalRoot = document.getElementById(\\\"modal-root\\\"); // A div with id=modal-root in the index.html\\n  const element = document.createElement(\\\"div\\\"); // Create a div element which will be mounted within modal-root\\n\\n  // useEffect bible: https://overreacted.io/a-complete-guide-to-useeffect/\\n  useEffect(() => {\\n    modalRoot.appendChild(element);\\n\\n    // cleanup method to remove the appended child\\n    return function cleanup() {\\n      modalRoot.removeChild(element);\\n    };\\n  });\\n\\n  return createPortal(children, element);\\n}\\n\\n// A modal component which will be used by other components / pages\\nfunction Modal({ children, toggle, open }) {\\n  return (\\n    <Portal>\\n      {open && (\\n        <StyledModal.ModalWrapper onClick={toggle}>\\n          <StyledModal.ModalBody onClick={event => event.stopPropagation()}>\\n            <StyledModal.CloseButton onClick={toggle}>\\n              &times;\\n            </StyledModal.CloseButton>\\n            {children}\\n          </StyledModal.ModalBody>\\n        </StyledModal.ModalWrapper>\\n      )}\\n    </Portal>\\n  );\\n}\\n\\nexport default Modal;\\n\")), mdx(\"p\", null, \"Here, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \" method creates the portal and uses the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" hook to append the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" element to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modal-root\"), \" element and removes while \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unmounting\"), \". Here is the problem I faced, but wait till we uncover the issue.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"StyledModal\"), \" is the styled component and the code is below (created under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/components/modal/style.js\"), \"):\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import styled from \\\"styled-components\\\";\\n\\nconst ModalWrapper = styled.div`\\n  position: fixed;\\n  z-index: 1;\\n  padding-top: 100px;\\n  left: 0;\\n  top: 0;\\n  width: 100%;\\n  height: 100%;\\n  overflow: auto;\\n  background-color: rgba(0, 0, 0, 0.4);\\n`;\\n\\nconst ModalBody = styled.div`\\n  background-color: #fefefe;\\n  margin: auto;\\n  padding: 20px;\\n  border: 1px solid #888;\\n  width: 30%;\\n`;\\n\\nconst CloseButton = styled.span`\\n  color: #aaaaaa;\\n  float: right;\\n  font-size: 28px;\\n  font-weight: bold;\\n\\n  &:hover,\\n  &:focus {\\n    color: #000;\\n    text-decoration: none;\\n    cursor: pointer;\\n  }\\n`;\\n\\nexport const StyledModal = {\\n  ModalWrapper,\\n  ModalBody,\\n  CloseButton\\n};\\n\")), mdx(\"p\", null, \"If you notice our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal\"), \" component, there are 3 props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"open: A boolean prop to decide whether to show the modal or not.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"toggle: A method prop to toggle \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"open\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" or vice-versa.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"children: A children component to render within modal. This is usually a modal content.\")), mdx(\"p\", null, \"To toggle the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Modal's\"), \" state, let\\u2019s create a new custom hook and call it as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useToggle\"), \". I\\u2019m creating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useToggle.js\"), \" in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"import { useState, useCallback } from \\\"react\\\";\\n\\n// Toggles between true or false\\nfunction useToggle(initialValue = false) {\\n  const [toggle, setToggle] = useState(initialValue);\\n\\n  return [toggle, useCallback(() => setToggle(status => !status), [])];\\n}\\n\\nexport default useToggle;\\n\")), mdx(\"p\", null, \"In this user can toggle between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \". This will be used in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component.\"), mdx(\"p\", null, \"Let\\u2019s rewrite our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function App() {\\n  const [open, setOpen] = useToggle(false);\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Hello CodeSandbox</h1>\\n      <button type=\\\"button\\\" onClick={() => setOpen()}>\\n        Open Modal\\n      </button>\\n\\n      {open && (\\n        <Modal open={open} toggle={setOpen}>\\n          <h1>Hello Modal</h1>\\n        </Modal>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useToggle\"), \" hook gives the state of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toggle\"), \" through a parameter called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \" and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setOpen\"), \" let you to toggle the value of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"open\"), \". The rest of the code is self-explanatory.\"), mdx(\"p\", null, \"When you run, you don\\u2019t see any problem. Great! We\\u2019ve built the Modal which shows the heading. Let\\u2019s extend it and add a form to our modal component with one input box.\"), mdx(\"p\", null, \"I\\u2019ve modified my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component with an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"input\"), \" element under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function App() {\\n  const [open, setOpen] = useToggle(false);\\n  const [username, setUsername] = useState(\\\"\\\");\\n\\n  const onChangeUsername = e => setUsername(e.target.value);\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Hello CodeSandbox</h1>\\n      <button type=\\\"button\\\" onClick={() => setOpen()}>\\n        Open Modal\\n      </button>\\n\\n      {open && (\\n        <Modal open={open} toggle={setOpen}>\\n          <h1>Hello Modal</h1>\\n\\n          <form onSubmit={e => e.preventDefault()}>\\n            <input\\n              type=\\\"text\\\"\\n              name=\\\"username\\\"\\n              value={username}\\n              onChange={e => onChangeUsername(e)}\\n            />\\n          </form>\\n        </Modal>\\n      )}\\n    </div>\\n  );\\n}\\n\")), mdx(\"p\", null, \"Now run the code and open up the modal. Try to enter more than one character in the displayed input box. Gosh, it is broken!!! For every character, the modal re-renders. Did you see that?\"), mdx(\"p\", null, \"Okay, how to fix that now? I\\u2019ve spent ample of time to understand the issue. With some help of reddit users and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://overreacted.io/a-complete-guide-to-useeffect/\"\n  }), \"bible\"), \", I\\u2019ve found an issue in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \" component.\"), mdx(\"p\", null, \"In our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \" component, we\\u2019ve to put the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" element into the state and add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modal-root\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"div\"), \" as dependencies for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \". So that it doesn\\u2019t re-render. Let\\u2019s do this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"function Portal({ children }) {\\n  const modalRoot = document.getElementById(\\\"modal-root\\\"); // A div with id=modal-root in the index.html\\n  const [element] = useState(document.createElement(\\\"div\\\")); // Create a div element which will be mounted within modal-root\\n\\n  // useEffect bible: https://overreacted.io/a-complete-guide-to-useeffect/\\n  useEffect(() => {\\n    modalRoot.appendChild(element);\\n\\n    // cleanup method to remove the appended child\\n    return function cleanup() {\\n      modalRoot.removeChild(element);\\n    };\\n  }, [modalRoot, element]);\\n\\n  return createPortal(children, element);\\n}\\n\")), mdx(\"p\", null, \"Now run, and try the same which caused the problem. Voila! now it worked.\"), mdx(\"p\", null, \"So always to remember, make sure \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" has the dependencies set properly to avoid re-rendering.\"), mdx(\"p\", null, \"The sample code sandbox can be found here:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/1z2p4wqyjq?fontsize=14\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://codesandbox.io/static/img/play-codesandbox.svg\",\n    \"alt\": \"Edit Modal-Portal-Demo\"\n  })))), mdx(\"p\", null, \"I hope my experience could help someone. If you like this article, kindly hit the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Like\"), \" button and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Share\"), \".\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Update\"), \": After a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.reddit.com/r/reactjs/comments/baujx4/form_in_modal_using_react_hooks_mistakes_and/\"\n  }), \"reddit\"), \" user pointed out, we can simplify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Portal\"), \" without even the hooks.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function Portal({ children }) {\\n  const modalRoot = document.getElementById('modal-root') // A div with id=modal-root in the index.html\\n\\n  return createPortal(<div>{children}</div>, element)\\n}\\n\")), mdx(\"p\", null, \"However, this post still remains valid which shows that user tend to do mistakes while creating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useEffect\"), \" and how to avoid them by managing dependencies for the side effects.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a0356db0-53a5-5f78-9bee-4d100fdef867","excerpt":"Recently, I’ve stumbled upon a problem while building a  Form  in the  Modal  box. I would like to share that experience and believe it…","slug":"/form-in-modal-using-react-hooks-mistakes-and-lesson-learnt/","title":"Form in Modal using React hooks - mistakes and lesson learnt","date":"April 08, 2019","parent":{"parent":{"relativeDirectory":"form-in-modal-using-react-hooks-mistakes-and-lesson-learnt"}},"relativeDirectory":"form-in-modal-using-react-hooks-mistakes-and-lesson-learnt"}}}