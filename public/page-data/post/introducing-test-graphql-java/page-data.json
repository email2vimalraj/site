{"componentChunkName":"component---src-templates-post-js","path":"/post/introducing-test-graphql-java/","result":{"data":{"post":{"id":"7e7b0ce2-e864-5ff3-a1f7-3164e15d11f6","title":"Introducing Test GraphQL Java","slug":"/introducing-test-graphql-java/","date":"June 02, 2019","excerpt":"I was recently asked by one of my friend how can we test the GraphQL APIs in Java. He is currently exploring  Karate's  capability, howeverâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introducing Test GraphQL Java\",\n  \"date\": \"2019-06-02T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I was recently asked by one of my friend how can we test the GraphQL APIs in Java. He is currently exploring \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Karate's\"), \" capability, however, he doesn\\u2019t want to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Karate\"), \" just for this as they\\u2019re already using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TestNG\"), \" based framework. And there is a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/graphql-java/graphql-java\"\n  }), \"graphql-java\"), \" library which let\\u2019s you to implement \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQL\"), \" in Java and test, but using Spring Boot. My main goal is not to introduce Spring Boot just for the sake of testing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQL\"), \" API. I wanted to keep it simple!\"), mdx(\"p\", null, \"Goals were:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should not bring various dependencies (this library currently depends only on \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"jackson\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should just turn the graphql file into request payload string.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should be able to use any HTTP client library.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Should be able to use any Java testing framework.\")), mdx(\"p\", null, \"That is how this library born. Let\\u2019s directly jump in how can we use it.\"), mdx(\"h2\", {\n    \"id\": \"getting-started\"\n  }, \"Getting Started\"), mdx(\"p\", null, \"Adding maven dependency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<dependency>\\n    <groupId>com.vimalselvam</groupId>\\n    <artifactId>test-graphql-java</artifactId>\\n    <version>1.0.0</version>\\n</dependency>\\n\")), mdx(\"p\", null, \"I don\\u2019t use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gradle\"), \", but it should be straight forward to add this library as a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Gradle\"), \" dependency.\"), mdx(\"p\", null, \"Let\\u2019s test the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://graphql-pokemon.now.sh/\"\n  }), \"Pokemon GraphQL API\"), \". We\\u2019re going to test the following query:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query pokemon {\\n  pokemon(name: \\\"Pikachu\\\") {\\n    name\\n  }\\n}\\n\")), mdx(\"p\", null, \"We\\u2019ll trigger this query and assert the successful response code and the response body where the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"name\"), \" key contains \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pikachu\"), \".\"), mdx(\"p\", null, \"Take the above query and put it into a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pokemon.graphql\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/test/resources/graphql/\"), \" in your maven project directory.\"), mdx(\"p\", null, \"We can load this file in our test using either of the following two ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"InputStream\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"InputStream iStream = getClass().getResourceAsStream(\\\"/graphql/pokemon.graphql\\\");\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"using \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"File\"), \":\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"File file = new File(\\\"src/test/resources/graphql/pokemon.graphql\\\");\\n\")), mdx(\"p\", null, \"For this example, I\\u2019m using the 2nd approach, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"File\"), \".\"), mdx(\"p\", null, \"Once you read the file, just pass it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphqlTemplate\"), \" class to parse as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"String graphqlPayload = GraphqlTemplate.parseGraphql(file, null);\\n\")), mdx(\"p\", null, \"The 2nd argument is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \" which is used to parameterize your GraphQL query. I\\u2019ll show you how to use that in a short while, till that let\\u2019s keep it \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \".\"), mdx(\"p\", null, \"That\\u2019s it! You now have the graphql query string which you can directly pass as a request payload on your preferred HTTP client library.\"), mdx(\"p\", null, \"Let\\u2019s talk about \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphQL\"), \" has a feature to set some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \" and pass those variables at run time during execution of query. For that, we\\u2019ll modify our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Pokemon\"), \" query.\"), mdx(\"p\", null, \"Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pokemon.graphql\"), \" file and change it as:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-graphql\"\n  }), \"query pokemon($name: String!) {\\n  pokemon(name: $name) {\\n    name\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$name\"), \" is the variable and it accepts only \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"String\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!\"), \" operator denotes that this is mandatory variable. Let\\u2019s see how we can handle this \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variables\"), \" scenario in our code.\"), mdx(\"p\", null, \"Before converting the GraphQL query to the plain string, let\\u2019s create the variables:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"ObjectNode variables = new ObjectMapper().createObjectNode();\\nvariables.put(\\\"name\\\", \\\"Pikachu\\\");\\n\")), mdx(\"p\", null, \"Here we\\u2019re using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"com.fasterxml.jackson.databind.node.ObjectNode\"), \" to create variables. This \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ObjectNode\"), \" can be passed as 2nd parameter in our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GraphqlTemplate\"), \" class.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"String graphqlPayload = GraphqlTemplate.parseGraphql(file, variables);\\n\")), mdx(\"p\", null, \"That simple it is!\"), mdx(\"p\", null, \"I\\u2019ve open sourced this library and can be found here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/vimalrajselvam/test-graphql-java\"\n  }), \"https://github.com/vimalrajselvam/test-graphql-java\"), \".\"), mdx(\"p\", null, \"Contributions are welcome. If you have any thoughts or issues, kindly open an issue in the above github link.\"), mdx(\"p\", null, \"Let\\u2019s see the full example code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"package com.vimalselvam.graphql;\\n\\nimport java.io.*;\\n\\nimport com.fasterxml.jackson.databind.JsonNode;\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\nimport com.fasterxml.jackson.databind.node.ObjectNode;\\n\\nimport org.testng.Assert;\\nimport org.testng.annotations.Test;\\n\\nimport okhttp3.*;\\n\\npublic class TestClass {\\n    private static final OkHttpClient client = new OkHttpClient();\\n    private final String graphqlUri = \\\"https://graphql-pokemon.now.sh/graphql\\\";\\n\\n    private Response prepareResponse(String graphqlPayload) throws IOException {\\n        RequestBody body = RequestBody.create(MediaType.get(\\\"application/json; charset=utf-8\\\"), graphqlPayload);\\n        Request request = new Request.Builder().url(graphqlUri).post(body).build();\\n        return client.newCall(request).execute();\\n    }\\n\\n    @Test\\n    public void testGraphqlWithInputStream() throws IOException {\\n        // Read a graphql file as an input stream\\n        InputStream iStream = TestClass.class.getResourceAsStream(\\\"/graphql/pokemon.graphql\\\");\\n\\n        // Create a variables to pass to the graphql query\\n        ObjectNode variables = new ObjectMapper().createObjectNode();\\n        variables.put(\\\"name\\\", \\\"Pikachu\\\");\\n\\n        // Now parse the graphql file to a request payload string\\n        String graphqlPayload = GraphqlTemplate.parseGraphql(iStream, variables);\\n\\n        // Build and trigger the request\\n        Response response = prepareResponse(graphqlPayload);\\n\\n        Assert.assertEquals(response.code(), 200, \\\"Response Code Assertion\\\");\\n\\n        String jsonData = response.body().string();\\n        JsonNode jsonNode = new ObjectMapper().readTree(jsonData);\\n        Assert.assertEquals(jsonNode.get(\\\"data\\\").get(\\\"pokemon\\\").get(\\\"name\\\").asText(), \\\"Pikachu\\\");\\n    }\\n\\n    @Test\\n    public void testGraphqlWithFile() throws IOException {\\n        // Read a graphql file\\n        File file = new File(\\\"src/test/resources/graphql/pokemon.graphql\\\");\\n\\n        // Create a variables to pass to the graphql query\\n        ObjectNode variables = new ObjectMapper().createObjectNode();\\n        variables.put(\\\"name\\\", \\\"Pikachu\\\");\\n\\n        // Now parse the graphql file to a request payload string\\n        String graphqlPayload = GraphqlTemplate.parseGraphql(file, variables);\\n\\n        // Build and trigger the request\\n        Response response = prepareResponse(graphqlPayload);\\n\\n        Assert.assertEquals(response.code(), 200, \\\"Response Code Assertion\\\");\\n\\n        String jsonData = response.body().string();\\n        JsonNode jsonNode = new ObjectMapper().readTree(jsonData);\\n        Assert.assertEquals(jsonNode.get(\\\"data\\\").get(\\\"pokemon\\\").get(\\\"name\\\").asText(), \\\"Pikachu\\\");\\n    }\\n\\n    @Test\\n    public void testGraphqlWithNoVariables() throws IOException {\\n        // Read a graphql file\\n        File file = new File(\\\"src/test/resources/graphql/pokemon-with-no-variable.graphql\\\");\\n\\n        // Now parse the graphql file to a request payload string\\n        String graphqlPayload = GraphqlTemplate.parseGraphql(file, null);\\n\\n        // Build and trigger the request\\n        Response response = prepareResponse(graphqlPayload);\\n\\n        Assert.assertEquals(response.code(), 200, \\\"Response Code Assertion\\\");\\n\\n        String jsonData = response.body().string();\\n        JsonNode jsonNode = new ObjectMapper().readTree(jsonData);\\n        Assert.assertEquals(jsonNode.get(\\\"data\\\").get(\\\"pokemon\\\").get(\\\"name\\\").asText(), \\\"Pikachu\\\");\\n    }\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"7e7b0ce2-e864-5ff3-a1f7-3164e15d11f6","excerpt":"I was recently asked by one of my friend how can we test the GraphQL APIs in Java. He is currently exploring  Karate's  capability, howeverâ€¦","slug":"/introducing-test-graphql-java/","title":"Introducing Test GraphQL Java","date":"June 02, 2019","parent":{"parent":{"relativeDirectory":"introducing-test-graphql-java"}},"relativeDirectory":"introducing-test-graphql-java"}}}