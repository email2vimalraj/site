{"componentChunkName":"component---src-templates-post-js","path":"/post/python-package-management-with-pipenv/","result":{"data":{"post":{"id":"b0e0fc7b-8416-5f80-b85c-232747ed6fa3","title":"Python Package Management with Pipenv","slug":"/python-package-management-with-pipenv/","date":"March 02, 2019","excerpt":"At my work I had to setup a package management for the Python based project. After almost 5 years, I'm putting my hands on Python andâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Python Package Management with Pipenv\",\n  \"date\": \"2019-03-02T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"At my work I had to setup a package management for the Python based project. After almost 5 years, I\\u2019m putting my hands on Python and observed many things had changed. Especially, how we use the new Pipenv for managing python packages. Let\\u2019s see on how to use Pipenv in Mac to setup the package management for the project.\"), mdx(\"p\", null, \"Before starting, let me see what are the versions of python I\\u2019ve on my machine:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"420px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/e67a62e0169a97281d584cef20d710c2/1b237/python-version.png\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"83.50515463917526%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundImage\": \"url('data:image/svg+xml,%3csvg%20xmlns=\\\\'http://www.w3.org/2000/svg\\\\'%20width=\\\\'400\\\\'%20height=\\\\'334\\\\'%3e%3cpath%20d=\\\\'M49%2067c-5%203-5%200-5%20101%200%2093%201%2095%203%2097%201%202%203%202%2022%203l17%201c-3%200-3%201%202%202%203%201%209%203%2014%203a4726%204726%200%2000211-3c4-1%204-1%201-2l9-1c21%200%2029-1%2031-3l1-98c0-93%200-96-2-98l-2-2-150-1-152%201m23%2021c-10%202-8%2015%202%2015%205%200%209-7%206-12-1-2-6-4-8-3m24%201c-3%202-4%205-3%2010%204%208%2016%206%2016-4%200-6-7-10-13-6m27%201c-7%206%200%2016%208%2013%206-3%207-11%202-14-4-3-7-2-10%201m113%2079c-5%206%201%2015%205%2010%202-1%203-7%201-10-1-3-5-3-6%200\\\\'%20fill=\\\\'%23d3d3d3\\\\'%20fill-rule=\\\\'evenodd\\\\'/%3e%3c/svg%3e')\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"python version\",\n    \"title\": \"python version\",\n    \"src\": \"/static/e67a62e0169a97281d584cef20d710c2/635b1/python-version.png\",\n    \"srcSet\": [\"/static/e67a62e0169a97281d584cef20d710c2/759d4/python-version.png 105w\", \"/static/e67a62e0169a97281d584cef20d710c2/6a467/python-version.png 210w\", \"/static/e67a62e0169a97281d584cef20d710c2/635b1/python-version.png 420w\", \"/static/e67a62e0169a97281d584cef20d710c2/1b237/python-version.png 582w\"],\n    \"sizes\": \"(max-width: 420px) 100vw, 420px\",\n    \"loading\": \"lazy\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"Surprise! I\\u2019ve two different versions installed on my machine. Fine, I wanted to use the\\xA0\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Python 3.7.1\"), \" version for my development.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"hello\\n\")), mdx(\"h2\", {\n    \"id\": \"create-the-project\"\n  }, \"Create the project\"), mdx(\"p\", null, \"Let\\u2019s create the project and setup the environment.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"~ mkdir python-demo-project\\n~ cd python-demo-project\\n\")), mdx(\"p\", null, \"Install Pipenv first:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pip3 install pipenv\\n\")), mdx(\"p\", null, \"Setup pipenv environment to use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Python 3.x\"), \" version. Run the following from the current directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"pipenv install --three\\n\")), mdx(\"p\", null, \"The above command will first create a virtual environment, then creates a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pipfile\"), \" and then creates \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pipfile.lock\"), \".\"), mdx(\"p\", null, \"The Pipfile contains some useful information:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[[source]]\\nname = \\\"pypi\\\"\\nurl = \\\"https://pypi.org/simple\\\"\\nverify_ssl = true\\n\\n[dev-packages]\\n\\n[packages]\\n\\n[requires]\\npython_version = \\\"3.7\\\"\\n\")), mdx(\"p\", null, \"Important blocks are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev-packages\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"packages\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \". Any packages required for only development purpose, will be added under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev-packages\"), \" and any other packages like for production use, those will be added under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"packages\"), \". The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"requires\"), \" section tells you that minimum required version is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"3.7\"), \".\"), mdx(\"p\", null, \"First, let\\u2019s install few packages for production use. To install a package with particular version.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pipenv install pandas==0.24.1\\n\")), mdx(\"p\", null, \"This will install the package and update the lockfile with dependencies details. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"packages\"), \" section in your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Pipfile\"), \" should look like this now:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[packages]\\npandas = \\\"==0.24.1\\\"\\n\")), mdx(\"p\", null, \"Let\\u2019s install a package for development purpose.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pipenv install numpy==1.16.2 --dev\\n\")), mdx(\"p\", null, \"The above command will install \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"numpy\"), \" package in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dev-packages\"), \" section.\"), mdx(\"p\", null, \"To run any command using our virtual environment, we can simply use \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pipenv\"), \" for it. For example, to open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python3\"), \" shell, you can simply trigger the following command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"~ pipenv run python\\nPython 3.7.1 (default, Nov 6 2018, 18:46:03)\\n[Clang 10.0.0 (clang-1000.11.45.5)] on darwin\\nType \\\"help\\\", \\\"copyright\\\", \\\"credits\\\" or \\\"license\\\" for more information.\\n>>>\\n\")), mdx(\"p\", null, \"Notice the version of python it shows.\"), mdx(\"p\", null, \"Now I\\u2019ve the package management in place. In my future posts, I\\u2019ll share more about my learnings. Keep watching and don\\u2019t forget to hit like and share in case you found this useful.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b0e0fc7b-8416-5f80-b85c-232747ed6fa3","excerpt":"At my work I had to setup a package management for the Python based project. After almost 5 years, I'm putting my hands on Python andâ€¦","slug":"/python-package-management-with-pipenv/","title":"Python Package Management with Pipenv","date":"March 02, 2019","parent":{"parent":{"relativeDirectory":"python-package-management-with-pipenv"}},"relativeDirectory":"python-package-management-with-pipenv"}}}