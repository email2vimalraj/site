{"componentChunkName":"component---src-templates-post-js","path":"/post/react-bootstrap-table-part-1/","result":{"data":{"post":{"id":"77358862-31fe-52c1-af57-bc8fa91f2ea9","title":"React bootstrap table - Part 1","slug":"/react-bootstrap-table-part-1/","date":"November 22, 2016","excerpt":"Sometime back I came across a library called  React Bootstrap Table . This helps you to build the table with loads of features likeâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React bootstrap table - Part 1\",\n  \"date\": \"2016-11-22\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Sometime back I came across a library called \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/AllenFang/react-bootstrap-table\"\n  }), \"React Bootstrap Table\"), \". This helps you to build the table with loads of features like Pagination, Filtering, Sorting, Export to CSV and many more. And even it allows you to customise as per your need. I\\u2019ve explored various grid / table component libraries to use, but many came with difficulty to either learning or implementing or lack of expected feature. So I\\u2019ve got settled with this library and moreover it is actively maintained.\"), mdx(\"h3\", {\n    \"id\": \"what-am-i-going-to-show\"\n  }, \"What am I going to show?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Basic table with data fetched from remote with pagination - Part 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Adding some filters - Part 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Customising few fields based on our needs - Part 3\")), mdx(\"h3\", {\n    \"id\": \"what-not\"\n  }, \"What not?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I\\u2019m not going to show you how to write react app with redux. I assume that you should know react and redux already. If not, kindly head to this \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://app.pluralsight.com/library/courses/react-redux-react-router-es6\"\n  }), \"tutorial\"), \" written by \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://medium.com/@housecor\"\n  }), \"Cory House\"), \". Because the sample app created follows exactly the same structure what he taught in that tutorial.\")), mdx(\"h3\", {\n    \"id\": \"demo\"\n  }, \"Demo\"), mdx(\"p\", null, \"You can download the sample from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/tree/basic-tutorial-part-1\"\n  }), \"here\"), \". This has the instructions on how to setup and run the demo.\"), mdx(\"h3\", {\n    \"id\": \"mock-data\"\n  }, \"Mock Data\"), mdx(\"p\", null, \"Before writing our component, we need some data to populate our table. I used \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://mockaroo.com\"\n  }), \"Mockaroo\"), \" to generate the mock data. The mock data contains \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"id, productName, price, manufacturedDate, expiryDate\"), \" elements with 100 rows. I would like to show 10 rows in table with 10 paginated links. This way at any point of time, user\\u2019s browser will only have 10 rows of data. For every pagination navigation, there will be a fetch call triggered.\"), mdx(\"h3\", {\n    \"id\": \"mock-api\"\n  }, \"Mock Api\"), mdx(\"p\", null, \"To ease certain things, I use mock api instead of real api, which will return the data when queried. Create a file called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"mockApi.js\"), \" in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/blob/basic-tutorial-part-1/src/api/mockApi.js\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"src/api/mockApi.js\")), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import _ from 'underscore'\\n\\n// Mock data generated from https://www.mockaroo.com/\\nconst mockData = [\\n  {\\n    id: 1,\\n    productName: 'pain reliever',\\n    price: 14,\\n    manufacturedDate: '2016-08-01',\\n    expiryDate: '2016-07-11'\\n  },\\n  {\\n    id: 2,\\n    productName: 'Dorzolamide Hydrochloride and Timolol Maleate',\\n    price: 100,\\n    manufacturedDate: '2015-12-30',\\n    expiryDate: '2016-05-29'\\n  }\\n]\\n\\nclass ProductApi {\\n  // Get the products by page number\\n  static getProducts(page) {\\n    return new Promise((resolve, reject) => {\\n      // Just to simulate a delay\\n      setTimeout(() => {\\n        let products = {}\\n        products.pageCount = 10\\n        products.resultsCount = 100\\n        products.productList = _.first(_.rest(mockData, page * 10 - 10), 10) // Divides the 100 data by chunks of 10\\n        resolve(Object.assign({}, products))\\n      }, 100)\\n    })\\n  }\\n}\\n\\nexport default ProductApi\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"getProducts\"), \" method will be triggered by the redux action to fetch the data. Refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/blob/basic-tutorial-part-1/src/actions/productActions.js\"\n  }), \"src/actions/productActions.js\"), \" on how to trigger from action. We also need the data populated on the table once the page is landed. Refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/blob/basic-tutorial-part-1/src/index.js#L13\"\n  }), \"src/index.js\"), \" on how we dispatch an action. Using the redux reducer, we stored the data into the state called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"products\"), \". Let\\u2019s create our component.\"), mdx(\"h3\", {\n    \"id\": \"components\"\n  }, \"Components\"), mdx(\"p\", null, \"For this tutorial, I\\u2019m going to create 2 components:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"HomePage - A container component\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ProductList - A presentational component\")), mdx(\"p\", null, \"Let\\u2019s build our presentational component first.\"), mdx(\"h4\", {\n    \"id\": \"productlist\"\n  }, \"ProductList\"), mdx(\"p\", null, \"Create \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ProductList.js\"), \" in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/blob/basic-tutorial-part-1/src/components/home/ProductList.js\"\n  }), \"src/components/home/ProductList.js\"), \" and paste the following code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React, { PropTypes } from 'react';\\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\\n\\n/**\\nA product list component which shows the table with list of data\\n**/\\nconst ProductList = ({\\n  products,\\n  activePage,\\n  onNavigatePage\\n}) => {\\n  const productList = products.productList;\\n\\n  const options = {\\n    hideSizePerPage: true,\\n    page: activePage,\\n    onPageChange: onNavigatePage\\n  };\\n\\n  return(\\n    <bootstraptable data=\\\"{productList}\\\" fetchinfo=\\\"{{dataTotalSize:\\\" products.resultscount}}=\\\"\\\" options=\\\"{options}\\\" remote=\\\"\\\" hover=\\\"\\\" pagination=\\\"\\\"><tableheadercolumn iskey=\\\"\\\" datafield=\\\"id\\\">Id</tableheadercolumn>\\n      <tableheadercolumn datafield=\\\"productName\\\">Product</tableheadercolumn>\\n      <tableheadercolumn datafield=\\\"price\\\">Price</tableheadercolumn>\\n      <tableheadercolumn datafield=\\\"manufacturedDate\\\">Manufacture Date</tableheadercolumn>\\n      <tableheadercolumn datafield=\\\"expiryDate\\\">Expiry Date</tableheadercolumn></bootstraptable>\\n  );\\n};\\n\\nProductList.propTypes = {\\n  products: PropTypes.object.isRequired,\\n  activePage: PropTypes.number.isRequired,\\n  onNavigatePage: PropTypes.func.isRequired\\n};\\n\\nexport default ProductList;\\n\")), mdx(\"p\", null, \"We start with importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BootstrapTable\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TableHeaderColumn\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-bootstrap-table\"), \" library.\\nThen we initialize our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProductList\"), \" presentational component with three properties:\"), mdx(\"ol\", null, mdx(\"li\", null, \"`products` - an object which we get from our mock api\"), mdx(\"li\", null, \"`activePage` - the current page number\"), mdx(\"li\", null, \"`onNavigatePage` - a function which will call our action (remember the action calls the mockApi) to update the data and updates the active page\")), mdx(\"p\", null, \"In the return, we initiate the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BootstrapTable\"), \" component with the required parameters which will be passed to our container component to render. Few things to note here:\"), mdx(\"ol\", null, mdx(\"li\", null, \"`data` - takes the list of items to render in the table. In our case we are passing 10 items of product list\"), mdx(\"li\", null, \"`fetchInfo` - in which we specify how much data we have, based on that the number of pages will be calculated. In our case, we are saying 100 rows, so the library will divide 100 by 10 by default and show 10 pages in the pagination links.\"), mdx(\"li\", null, \"`options` - this is where we say what is our current page, what should happen if we navigate to another page and so on.\"), mdx(\"li\", null, \"`remote` - when it is true, the library ensures the data is coming from external source. In our case, it is coming from `mockApi`.\")), mdx(\"p\", null, \"Next thing, for each field we create a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TableHeaderColumn\"), \" by saying my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" column is the unique using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isKey\"), \" attribute.\"), mdx(\"p\", null, \"Let\\u2019s create our container component.\"), mdx(\"h4\", {\n    \"id\": \"homepage\"\n  }, \"HomePage\"), mdx(\"p\", null, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomePage.js\"), \" in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/react-bootstrap-table-example/blob/basic-tutorial-part-1/src/components/home/HomePage.js\"\n  }), \"src/components/home/HomePage.js\"), \" and paste the following there:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React, { PropTypes } from 'react'\\nimport { connect } from 'react-redux'\\nimport { bindActionCreators } from 'redux'\\nimport * as productActions from '../../actions/productActions'\\nimport ProductList from './ProductList'\\n\\nclass HomePage extends React.Component {\\n  constructor(props, context) {\\n    super(props, context)\\n    this.state = {\\n      activePage: 1\\n    }\\n    this.onNavigatePage = this.onNavigatePage.bind(this)\\n  }\\n\\n  // This calls the loadAllProducts action and\\n  // also updates the activePage state to the navigated page number\\n  onNavigatePage(page, sizePerPage) {\\n    this.props.actions.loadAllProducts(page)\\n    this.setState({ activePage: page })\\n  }\\n\\n  render() {\\n    const { products } = this.props\\n    return (\\n      Object.keys(products).length > 0 && (\\n        <ProductList\\n          products={products}\\n          activePage={this.state.activePage}\\n          onNavigatePage={this.onNavigatePage}\\n        />\\n      )\\n    )\\n  }\\n}\\n\\nHomePage.propTypes = {\\n  products: PropTypes.object.isRequired,\\n  actions: PropTypes.object.isRequired\\n}\\n\\nfunction mapStateToProps(state, ownProps) {\\n  return {\\n    products: state.products\\n  }\\n}\\n\\nfunction mapDispatchToProps(dispatch) {\\n  return {\\n    actions: bindActionCreators(productActions, dispatch)\\n  }\\n}\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\\n\")), mdx(\"p\", null, \"Direct jump to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" method. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"render\"), \" method simply initiates a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ProductList\"), \" component with the required properties which we have explained earlier.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onNavigatePage\"), \" method is implemented here which takes care of calling the action for the required page and udpates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"activePage\"), \" state so that the pagination control set the current page as active. That\\u2019s it.\"), mdx(\"p\", null, \"Now if you run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"npm start -s\"), \", and head to browser where it opened \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:3005\"\n  }), \"http://localhost:3005\"), \" you could see the table with pagination as like this:\"), mdx(\"p\", null, mdx(\"span\", _extends({\n    parentName: \"p\"\n  }, {\n    \"className\": \"gatsby-resp-image-wrapper\",\n    \"style\": {\n      \"position\": \"relative\",\n      \"display\": \"block\",\n      \"marginLeft\": \"auto\",\n      \"marginRight\": \"auto\",\n      \"maxWidth\": \"420px\"\n    }\n  }), \"\\n      \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"gatsby-resp-image-link\",\n    \"href\": \"/static/acce158e37e6463168946a94990a69aa/3b243/react-bootstrap-table-example-1024x387.png\",\n    \"style\": {\n      \"display\": \"block\"\n    },\n    \"target\": \"_blank\",\n    \"rel\": [\"noopener\"]\n  }), \"\\n    \", mdx(\"span\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-background-image\",\n    \"style\": {\n      \"paddingBottom\": \"37.79296875%\",\n      \"position\": \"relative\",\n      \"bottom\": \"0\",\n      \"left\": \"0\",\n      \"backgroundImage\": \"url('data:image/svg+xml,%3csvg%20xmlns=\\\\'http://www.w3.org/2000/svg\\\\'%20width=\\\\'400\\\\'%20height=\\\\'151\\\\'%3e%3cpath%20d=\\\\'M321%20139l-1%206v5h12v-11l-6-1-5%201\\\\'%20fill=\\\\'%23d3d3d3\\\\'%20fill-rule=\\\\'evenodd\\\\'/%3e%3c/svg%3e')\",\n      \"backgroundSize\": \"cover\",\n      \"display\": \"block\"\n    }\n  })), \"\\n  \", mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"className\": \"gatsby-resp-image-image\",\n    \"alt\": \"React bootstrap table example\",\n    \"title\": \"React bootstrap table example\",\n    \"src\": \"/static/acce158e37e6463168946a94990a69aa/635b1/react-bootstrap-table-example-1024x387.png\",\n    \"srcSet\": [\"/static/acce158e37e6463168946a94990a69aa/759d4/react-bootstrap-table-example-1024x387.png 105w\", \"/static/acce158e37e6463168946a94990a69aa/6a467/react-bootstrap-table-example-1024x387.png 210w\", \"/static/acce158e37e6463168946a94990a69aa/635b1/react-bootstrap-table-example-1024x387.png 420w\", \"/static/acce158e37e6463168946a94990a69aa/b2a12/react-bootstrap-table-example-1024x387.png 630w\", \"/static/acce158e37e6463168946a94990a69aa/04a72/react-bootstrap-table-example-1024x387.png 840w\", \"/static/acce158e37e6463168946a94990a69aa/3b243/react-bootstrap-table-example-1024x387.png 1024w\"],\n    \"sizes\": \"(max-width: 420px) 100vw, 420px\",\n    \"loading\": \"lazy\"\n  })), \"\\n  \"), \"\\n    \")), mdx(\"p\", null, \"We\\u2019ll again meet soon with the Part-2.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"77358862-31fe-52c1-af57-bc8fa91f2ea9","excerpt":"Sometime back I came across a library called  React Bootstrap Table . This helps you to build the table with loads of features likeâ€¦","slug":"/react-bootstrap-table-part-1/","title":"React bootstrap table - Part 1","date":"November 22, 2016","parent":{"parent":{"relativeDirectory":"react-bootstrap-table-part-1"}},"relativeDirectory":"react-bootstrap-table-part-1"}}}