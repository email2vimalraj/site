{"componentChunkName":"component---src-templates-post-js","path":"/post/react-usereducer-hooks-demo-with-nested-select-boxes/","result":{"data":{"post":{"id":"15b3c0ed-1a43-5b26-9146-fe6ca4db1f79","title":"React: useReducer hooks demo with nested select boxes","date":"March 02, 2019","excerpt":"Today I got into a situation where I had to select the nested select box, that is, based on the value selected on the first select box, the…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React: useReducer hooks demo with nested select boxes\",\n  \"date\": \"2019-03-02\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Today I got into a situation where I had to select the nested select box, that is, based on the value selected on the first select box, the values should be populated on the second select box.\"), mdx(\"p\", null, \"This is the first time I\\u2019m trying hooks in react and wanted to experiment it. For this demo, I\\u2019m using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://react-select.com/home\"\n  }), \"react-select\"), \" component.\"), mdx(\"p\", null, \"The requirement is that the first select box will have list of countries. After I select one country, the second select box should be shown with the list of states of the selected country and the country select box should be disabled. Let\\u2019s build it!\"), mdx(\"p\", null, \"Consider I\\u2019ve the data as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const data = {\\n  countries: [\\n    {\\n      value: 'INDIA',\\n      label: 'India',\\n      states: [\\n        { value: 'TAMIL NADU', label: 'Tamil Nadu' },\\n        { value: 'KERALA', label: 'Kerala' },\\n        { value: 'ANDHRA PRADESH', label: 'Andhra Pradesh' }\\n      ]\\n    },\\n    {\\n      value: 'US',\\n      label: 'USA',\\n      states: [\\n        { value: 'CA', label: 'California' },\\n        { value: 'NY', label: 'New York' }\\n      ]\\n    }\\n  ]\\n}\\n\")), mdx(\"p\", null, \"And I\\u2019m setting up an initial state of my component:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const initialState = {\\n  disableCountry: false,\\n  disableState: true,\\n  loadingState: false,\\n  statesToBeLoaded: []\\n}\\n\")), mdx(\"p\", null, \"Then I create the reducer function with list of actions that I trigger from my component. The actions are when I select a country and when I click on a clear button to clear my selections:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const POPULATE_STATE = 'populateState'\\nconst CLEAR = 'clear'\\nfunction reducer(state, action) {\\n  switch (action.type) {\\n    case POPULATE_STATE:\\n      return {\\n        ...state,\\n        disableCountry: true,\\n        disableState: false,\\n        loadingState: true,\\n        statesToBeLoaded: data.countries.find(\\n          country => country.value === action.country\\n        ).states\\n      }\\n    case CLEAR:\\n    default:\\n      return initialState\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now I\\u2019m going to build my functional component which renders two select boxes:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function App() {\\n  const [state, dispatch] = useReducer(reducer, initialState)\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>useReducer demo</h1>\\n\\n      <Select\\n        isDisabled={state.disableCountry}\\n        isLoading={state.loadingState}\\n        isClearable\\n        isSearchable\\n        placeholder=\\\"Select Country...\\\"\\n        name=\\\"country\\\"\\n        options={data.countries}\\n        onChange={e => dispatch({ type: POPULATE_STATE, country: e.value })}\\n      />\\n\\n      <br />\\n\\n      {!state.disableState && (\\n        <>\\n          <Select\\n            isDisabled={state.disableState}\\n            isLoading={false}\\n            isClearable\\n            isSearchable\\n            placeholder=\\\"Select State...\\\"\\n            name=\\\"state\\\"\\n            options={state.statesToBeLoaded}\\n          />\\n\\n          <br />\\n\\n          <button type=\\\"button\\\" onClick={() => dispatch({ type: CLEAR })}>\\n            Clear\\n          </button>\\n        </>\\n      )}\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", null, \"Here \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"const [state, dispatch] = useReducer(reducer, initialState)\"), \" I\\u2019m using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useReducer\"), \" function from the react which gives me back the current state and the dispatch method to trigger actions.\"), mdx(\"p\", null, \"So I dispatch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"POPULATE_STATE\"), \" during \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" event in my first select box to load the states of the selected country, and I dispatch \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CLEAR\"), \" even when user clicked on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Clear\"), \" button to reset the state of the functional component.\"), mdx(\"p\", null, \"This worked perfectly! We can extend this example to load the data from the external apis during our dispatch event and leverage \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loading\"), \" state to display the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"progress\"), \" indicator.\"), mdx(\"h3\", {\n    \"id\": \"code-sandbox-demo\"\n  }, \"Code Sandbox demo\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/o9461q0z59?fontsize=14\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://codesandbox.io/static/img/play-codesandbox.svg\",\n    \"alt\": \"Edit useReducer demo\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"15b3c0ed-1a43-5b26-9146-fe6ca4db1f79","excerpt":"Today I got into a situation where I had to select the nested select box, that is, based on the value selected on the first select box, the…","slug":"/react-usereducer-hooks-demo-with-nested-select-boxes/","title":"React: useReducer hooks demo with nested select boxes","date":"March 02, 2019","parent":{"parent":{"relativeDirectory":"react-usereducer-hooks-demo-with-nested-select-boxes"}},"relativeDirectory":"react-usereducer-hooks-demo-with-nested-select-boxes"}}}