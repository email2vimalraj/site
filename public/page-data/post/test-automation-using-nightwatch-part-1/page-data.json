{"componentChunkName":"component---src-templates-post-js","path":"/post/test-automation-using-nightwatch-part-1/","result":{"data":{"post":{"id":"03cbb682-f514-580e-bc1a-5d1b4cdf6dff","title":"Test Automation using NightWatch - Part 1","date":"May 07, 2017","excerpt":"Nightwatch Examples In this blog series, I'm going to show you what I've learned automating using  NightwatchJs . A NightwatchJs is an E2Eâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Test Automation using NightWatch - Part 1\",\n  \"date\": \"2017-05-07T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"nightwatch-examples\"\n  }, \"Nightwatch Examples\"), mdx(\"p\", null, \"In this blog series, I\\u2019m going to show you what I\\u2019ve learned automating using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://nightwatchjs.org/\"\n  }), \"NightwatchJs\"), \".\"), mdx(\"p\", null, \"A NightwatchJs is an E2E testing framework used for automating browser web apps. It uses the W3C WebDriver API as the underlying to perform automation.\"), mdx(\"p\", null, \"It has the built in test runner, which can run the tests even in parallel, by group and tags. It comes with the out-of-the box solution to execute tests on cloud testing services, such as SauceLabs and BrowserStack.\"), mdx(\"p\", null, \"By default, it provides the JUnit XML report generated after the execution which is easy to integrate with the CI tools such as Jenkins, TeamCity and so on.\"), mdx(\"h2\", {\n    \"id\": \"what-are-we-going-to-automate\"\n  }, \"What are we going to automate?\"), mdx(\"p\", null, \"We are going to automate \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://the-internet.herokuapp.com/\"\n  }), \"The Internet\"), \" website. While performing automation, we together solve problems / challenges.\"), mdx(\"p\", null, \"Let\\u2019s start!\"), mdx(\"h2\", {\n    \"id\": \"pre-requisites\"\n  }, \"Pre-requisites\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node with NPM (I\\u2019m using Node v7.1.0 and npm v3.10.9)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(Optional) Yarn (I\\u2019m using Yarn v0.17.6)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Chrome browser (My chrome version is 57.0)\")), mdx(\"h2\", {\n    \"id\": \"sample-code\"\n  }, \"Sample code\"), mdx(\"p\", null, \"This is an optional step. The example that we are going to see in this article are available in the github. Follow the steps to clone and run:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"git clone https://github.com/email2vimalraj/nightwatch-example.git\\ncd nightwatch-example\\nyarn\\n\")), mdx(\"h2\", {\n    \"id\": \"setup\"\n  }, \"Setup\"), mdx(\"p\", null, \"Create a directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"mkdir nightwatch-example\\ncd nightwatch-example\\n\")), mdx(\"p\", null, \"Initiate the node js project using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn init\\n\")), mdx(\"p\", null, \"Accept all the default parameters which yarn prompts.\"), mdx(\"p\", null, \"Install NightwatchJS as dev dependency using:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add --dev nightwatch\\n\")), mdx(\"h2\", {\n    \"id\": \"configuration\"\n  }, \"Configuration\"), mdx(\"p\", null, \"The nightwatch test runner uses the json file which is used as configuration for the test runner.\"), mdx(\"p\", null, \"By default, if a file called \", mdx(\"b\", null, \"nightwatch.json\"), \" available in the current directory, test runner will pick it up.\"), mdx(\"p\", null, \"Let\\u2019s create the following \", mdx(\"b\", null, \"nightwatch.json\"), \" in the project\\u2019s root directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  \\\"src_folders\\\": [\\\"tests\\\"],\\n  \\\"output_folder\\\": \\\"reports\\\",\\n\\n  \\\"test_settings\\\": {\\n    \\\"default\\\": {\\n      \\\"launch_url\\\": \\\"http://the-internet.herokuapp.com/\\\",\\n      \\\"desiredCapabilities\\\": {\\n      \\\"browserName\\\": \\\"chrome\\\"\\n      }\\n    }\\n  }\\n}\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src_folder\"), \" - will contain a list of folders where the test scripts are placed. In this example, we\\u2019ll be keeping all our tests in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tests\"), \" directory\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"output_folder\"), \" - this config let\\u2019s you place the generated reports in the specified directory. Here, the reports will be generated in the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reports\"), \" directory.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"test_settings\"), \" - This will contain all test related settings, in other words, we can have settings for each different environment. The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"default\"), \" is mandatory and a default setting used by tests.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"launch_url\"), \" - Let\\u2019s you define the default url that we use to automate. We\\u2019ll look further on how we use this setting.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"desiredCapabilities\"), \" - It is the Webdriver\\u2019s desired capabilities configuration. Here we\\u2019re using Chrome as the default browser for our automation.\"))), mdx(\"h2\", {\n    \"id\": \"chromedriver-setup\"\n  }, \"Chromedriver setup\"), mdx(\"p\", null, \"There are two ways to configure Chromedriver to automate on the chrome browser.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using Selenium Server (requires Java)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Using Standalone (no dependency on Java)\")), mdx(\"p\", null, \"In this example, we will be using the Standalone usage since there is no dependency on Java. But it requires a one-time configuration. Let\\u2019s install the \", mdx(\"b\", null, \"ChromeDriver\"), \" npm package:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"yarn add --dev chromedriver\\n\")), mdx(\"p\", null, \"Then disable the selenium server in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nightwatch.json\"), \" file by adding the following configuration at the end:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"selenium\\\": {\\n  \\\"start_process\\\": false\\n}\\n\")), mdx(\"p\", null, \"Then in the \", mdx(\"b\", null, \"test_settings\"), \" configuration, we\\u2019ll have to configure the selenium port and host since the default port used by chromedriver is \", mdx(\"b\", null, \"9515\"), \". Let\\u2019s update the \", mdx(\"b\", null, \"test_settings\"), \" config:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"selenium_port\\\": 9515,\\n\\\"selenium_host\\\": \\\"localhost\\\",\\n\\\"default_path_prefix\\\": \\\"\\\"\\n\")), mdx(\"p\", null, \"We have to clear the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"default_path_prefix\"), \", as it is by default set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/wd/hub\"), \" which chromedriver doesn\\u2019t require it.\"), mdx(\"h3\", {\n    \"id\": \"create-a-chrome-driver-global-file\"\n  }, \"Create a chrome driver global file\"), mdx(\"p\", null, \"A global file is the js file which will be loaded by the test runner and made available to the test. We\\u2019ll be using this file to start the chromedriver before the test starts and quits the chromedriver after the test finishes its execution.\"), mdx(\"p\", null, \"Let\\u2019s create a file called \", mdx(\"b\", null, \"chromedriver.global.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"var chromedriver = require('chromedriver')\\n\\nmodule.exports = {\\n  before: function(done) {\\n    chromedriver.start()\\n    done()\\n  },\\n\\n  after: function(done) {\\n    chromedriver.stop()\\n    done()\\n  }\\n}\\n\")), mdx(\"p\", null, \"Now we\\u2019ll have to load this file through the configuration file. Add the following config at the end of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nightwatch.json\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\\"globals_path\\\": \\\"./chromedriver.global.js\\\"\\n\")), mdx(\"p\", null, \"Our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nightwatch.json\"), \" should look like this now:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"{\\n  \\\"src_folders\\\": [\\\"tests\\\"],\\n  \\\"output_folder\\\": \\\"reports\\\",\\n\\n  \\\"selenium\\\": {\\n    \\\"start_process\\\": false\\n  },\\n\\n  \\\"test_settings\\\": {\\n    \\\"default\\\": {\\n      \\\"launch_url\\\": \\\"http://the-internet.herokuapp.com/\\\",\\n      \\\"selenium_port\\\": 9515,\\n      \\\"selenium_host\\\": \\\"localhost\\\",\\n      \\\"default_path_prefix\\\": \\\"\\\",\\n      \\\"desiredCapabilities\\\": {\\n        \\\"browserName\\\": \\\"chrome\\\"\\n      }\\n    }\\n  },\\n\\n  \\\"globals_path\\\": \\\"./chromedriver.global.js\\\"\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"create-our-first-test\"\n  }, \"Create our first test\"), mdx(\"p\", null, \"Let\\u2019s create a \", mdx(\"b\", null, \"HomeTest.js\"), \" file in the \", mdx(\"b\", null, \"tests\"), \" directory:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n  'Test Home Page': function(client) {\\n    client.init()\\n    client.waitForElementVisible('body', 1000)\\n    client.assert.title('The Internet')\\n    client.expect.element('.heading').text.to.equal('Welcome to the Internet')\\n    client.end()\\n  }\\n}\\n\")), mdx(\"p\", null, \"Each file in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tests\"), \" directory is considered as test suite. Here, in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"HomeTest.js\"), \" we have created one test called \", mdx(\"b\", null, \"Test Home Page\"), \". Each test function will have one parameter which holds the webdriver instance. Here, we are calling that instance as \", mdx(\"b\", null, \"client\"), \". All the nightwatch webdriver commands are accessed through this instance.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.init()\"), \" will launch the browser with the url configured in the \", mdx(\"b\", null, \"launch_url\"), \" property in the nightwatch.json. In our case, it will open the chrome browser and launch \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://the-internet.herokuapp.com/\"\n  }), \"http://the-internet.herokuapp.com/\"), \".\"), mdx(\"p\", null, \"Then it will wait for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"body\"), \" tag to be visible for maximum of 1 sec.\\nAfter that we assert the title to be equal to \", mdx(\"b\", null, \"The Internet\"), \". Then we expect an element with class attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".heading\"), \" and with text to be equal to \", mdx(\"b\", null, \"Welcome to the Internet\"), \".\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.end()\"), \" is mandatory to close the browser instance and stop the selenium server instance.\"), mdx(\"p\", null, \"Let\\u2019s execute our first test. Spin off your terminal / command prompt, and execute your test as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"./node_modules/.bin/nightwatch\\n\")), mdx(\"p\", null, \"This should execute your tests and you can watch the result in your console:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"[home test] Test Suite\\n==========================\\n\\nRunning: Test Home Page\\n\\u2714 Element &lt;body&gt; was visible after 44 milliseconds.\\n\\u2714 Testing if the page title equals \\\"The Internet\\\".\\n\\u2714 Expected element &lt;.heading&gt; text to equal: \\\"Welcome to the Internet\\\"\\n\\nOK. 3 assertions passed. (20.669s)\\n\")), mdx(\"p\", null, \"Awesome, we successfully created our test and executed. Let\\u2019s add one more test:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"module.exports = {\\n  'Test Home Page': function(client) {\\n    client.init()\\n    client.waitForElementVisible('body', 1000)\\n    client.assert.title('The Internet')\\n    client.expect.element('.heading').text.to.equal('Welcome to the Internet')\\n  },\\n\\n  'Navigate to Broken Images page': function(client) {\\n    client.click(\\\"a[href='/broken_images']\\\")\\n    client.expect.element('.example &gt; h3').text.to.equal('Broken Images')\\n    client.end()\\n  }\\n}\\n\")), mdx(\"p\", null, \"Here we have added another test called \", mdx(\"b\", null, \"Navigate to Broken Images page\"), \" in which we navigate to the \", mdx(\"b\", null, \"Broken Images\"), \" page and assert the heading.\\nNote that we have removed the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"client.end()\"), \" from the first test and moved that to the second test.\"), mdx(\"p\", null, \"Execute again and see both of your tests run.\"), mdx(\"p\", null, \"Finally, we have two tests which runs successfully.\"), mdx(\"p\", null, \"In the next part, we\\u2019ll make our tests more maintainable using page object pattern.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"03cbb682-f514-580e-bc1a-5d1b4cdf6dff","excerpt":"Nightwatch Examples In this blog series, I'm going to show you what I've learned automating using  NightwatchJs . A NightwatchJs is an E2Eâ€¦","slug":"/test-automation-using-nightwatch-part-1/","title":"Test Automation using NightWatch - Part 1","date":"May 07, 2017","parent":{"parent":{"relativeDirectory":"test-automation-using-nightwatch-part-1"}},"relativeDirectory":"test-automation-using-nightwatch-part-1"}}}