{"componentChunkName":"component---src-templates-post-js","path":"/post/testng-extent-report/","result":{"data":{"post":{"id":"8ea75789-756d-5679-9651-161bf1f57163","title":"TestNG Extent Report - v1.3.x","slug":"/testng-extent-report/","date":"November 28, 2016","excerpt":"Update:  Updated to  v1.3.1  - Now emailable report will also be generated  Update:  Updated to  v1.2.0 The TestNG Extents report is aâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"TestNG Extent Report - v1.3.x\",\n  \"date\": \"2016-11-28T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Update:\"), \" Updated to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v1.3.1\"), \" - Now emailable report will also be generated \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Update:\"), \" Updated to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v1.2.0\")), mdx(\"p\", null, \"The TestNG Extents report is a listener plugin which you can add it as a listener to your TestNG suite to generate a nice Extent report.\"), mdx(\"p\", null, \"This listener uses the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://extentreports.relevantcodes.com/\"\n  }), \"ExtentReports v3.0.0\"), \", a library developed by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/anshooarora\"\n  }), \"Anshoo Arora\"), \" for reporting.\"), mdx(\"h2\", {\n    \"id\": \"why-another-library\"\n  }, \"Why another library?\"), mdx(\"p\", null, \"You don\\u2019t have to spend time in re-inventing on how to define what. Just add this as a listener or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://testng.org/doc/documentation-main.html#listeners-service-loader\"\n  }), \"service loader\"), \". You will get the nice looking report generated at the end of your test execution.\"), mdx(\"p\", null, \"Also, you will get the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"emailable report\"), \" out-of-the box.\"), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"For maven, add the following as dependency:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<dependency>\\n  <groupId>com.vimalselvam</groupId>\\n  <artifactId>testng-extentsreport</artifactId>\\n  <version>1.3.1</version>\\n</dependency>\\n\")), mdx(\"p\", null, \"Either in your \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"testng.xml\"), \", add the listener:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<listeners>\\n  <listener class-name=\\\"com.vimalselvam.testng.listener.ExtentTestNgFormatter\\\" />\\n</listeners>\\n\")), mdx(\"p\", null, \"or add as a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://testng.org/doc/documentation-main.html#listeners-service-loader\"\n  }), \"service loader\"), \" (recommended).\"), mdx(\"p\", null, \"By default, the report will be generated at TestNG\\u2019s output directory. i.e., \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test-output/report.html\"), \" and the emailable report at \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"test-output/emailable-report.html\"), \".\"), mdx(\"p\", null, \"In case you want to generate the report in a different location, make sure you pass the JVM argument called \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"reportPath\"), \" with the absolute directory path.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"For example\"), \": I run my maven test as: \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mvn clean test -DreportPath=output\"), \". This will generate both the reports in my \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"{\", \"project directory}/output\"), \".\"), mdx(\"h3\", {\n    \"id\": \"adding-custom-reporter-config\"\n  }, \"Adding custom reporter config\"), mdx(\"p\", null, \"You can customize the report using a XML file. The XML file should follow as given here: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://extentreports.relevantcodes.com/java/#configuration\"\n  }), \"ExtentReports Configuration\"), \".\"), mdx(\"p\", null, \"The XML file should be referred as parameter in your suite xml. The parameter name should be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"report.config\"), \". For instance, the parameter in the suite xml should be as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<parameter name=\\\"report.config\\\" value=\\\"src/test/resources/extent-config.xml\\\" />\\n\")), mdx(\"p\", null, \"The value should be the config XML file path.\"), mdx(\"h3\", {\n    \"id\": \"adding-system-information\"\n  }, \"Adding System Information\"), mdx(\"p\", null, \"In case you want to add system information, you will have to implement an interface \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"com.vimalselvam.testng.SystemInfo\"), \". This interface contains a method with return type as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Map<String, String>\"), \". Construct your system information with the map and return that map. After you have implemented, the custom implementation should be referred in your TestNG Suite xml as a parameter at the suite level.\"), mdx(\"p\", null, \"For instance add the following parameter at your suite level in the TestNG suite xml:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-xml\"\n  }), \"<parameter name=\\\"system.info\\\" value=\\\"test.MySystemInfo\\\" />\\n\")), mdx(\"p\", null, \"The parameter name should be \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"system.info\"), \" and the value should be your fully qualified custom implementation class name. For example my custom implementation look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"package test;\\n\\nimport com.vimalselvam.testng.SystemInfo; import org.testng.collections.Maps;\\n\\nimport java.util.Map;\\n\\n// This is a small utility class to prepare the system information\\npublic class MySystemInfo implements SystemInfo {\\n  @Override\\n  public Map<String, String> getSystemInfo() {\\n    Map<String, String> systemInfo = Maps.newHashMap();\\n    systemInfo.put(\\\"Test Env\\\", \\\"QA\\\");\\n    systemInfo.put(\\\"Browser\\\", \\\"firefox\\\");\\n    return systemInfo;\\n  }\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"instance-of-the-listener\"\n  }, \"Instance of the Listener\"), mdx(\"p\", null, \"At any point in time, you can get the instance of the listener as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"ExtentTestNgFormatter.getInstance()\")), mdx(\"h3\", {\n    \"id\": \"adding-screenshot\"\n  }, \"Adding Screenshot\"), mdx(\"p\", null, \"To add the screenshot, you have two options. \", \"*\", \" If the screenshot can be added from the test method, then\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"ExtentTestNgFormatter.getInstance().addScreenCaptureFromPath(filePath);\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the screenshot can be added from the configuration method, then for example:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@AfterMethod\\npublic void afterMethod(ITestResult iTestResult) throws IOException {\\n  // The ITestResult is a mandatory parameter\\n  ExtentTestNgFormatter.getInstance().addScreenCaptureFromPath(iTestResult, filePath);\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-info-log\"\n  }, \"Adding info log\"), mdx(\"p\", null, \"If any case, you want to attach the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"info\"), \" log on your test method, you simply call TestNg\\u2019s \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Reporter.log\"), \" method which will be added to your test log. For example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"@Test\\npublic void testMethod() {\\n  Reporter.log(\\\"Custom log\\\");\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-test-runner-output\"\n  }, \"Adding test runner output\"), mdx(\"p\", null, \"To add the test runner output, simply call from anywhere:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"ExtentTestNgFormatter.getInstance().setTestRunnerOutput(\\\"My output\\\");\\n\")), mdx(\"h3\", {\n    \"id\": \"adding-new-node\"\n  }, \"Adding new node\"), mdx(\"p\", null, \"Sometimes you may have to add new node under your test. This situation arises when you have iteration in the test method and considering each iteration as a separate node in the report. This could be solved by using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"addNewNodeToTest()\"), \" method.\"), mdx(\"p\", null, \"Refer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/TestNGExtentsReport/blob/master/src/test/java/test/DemoTestClass.java\"\n  }), \"DemoTestClass\"), \" on how to add new nodes and in case of failure, how to fail the added node.\"), mdx(\"h2\", {\n    \"id\": \"cucumber\"\n  }, \"Cucumber?\"), mdx(\"p\", null, \"Refer my another library which generates the same report for the cucumber based BDD tests: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/email2vimalraj/CucumberExtentReporter\"\n  }), \"CucumberExtentReporter\")));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"8ea75789-756d-5679-9651-161bf1f57163","excerpt":"Update:  Updated to  v1.3.1  - Now emailable report will also be generated  Update:  Updated to  v1.2.0 The TestNG Extents report is aâ€¦","slug":"/testng-extent-report/","title":"TestNG Extent Report - v1.3.x","date":"November 28, 2016","parent":{"parent":{"relativeDirectory":"testng-extent-report"}},"relativeDirectory":"testng-extent-report"}}}