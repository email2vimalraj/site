{"componentChunkName":"component---src-templates-post-js","path":"/post/toggle-theme-using-react-hooks/","result":{"data":{"post":{"id":"ad362391-f2c8-5d16-ac6b-e2d94a9d4ff8","title":"Toggle theme using React Hooks","slug":"/toggle-theme-using-react-hooks/","date":"May 28, 2019","excerpt":"I was trying to implement the Dark mode to one of the application which I was working. Most of the examples available in Internet usesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Toggle theme using React Hooks\",\n  \"date\": \"2019-05-28T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I was trying to implement the Dark mode to one of the application which I was working. Most of the examples available in Internet uses either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"styled-components\"), \" or any other \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css-in-js\"), \" concepts. The application which I\\u2019m working on doesn\\u2019t have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"css-in-js\"), \" yet. So I want to keep it very simple. Hence, the very first thing that came up is to use React\\u2019s \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/context.html\"\n  }), \"Context\"), \" API. Why Context? As per the react documentation:\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Context provides a way to pass data through the component tree without having to pass props down manually at every level.\")), mdx(\"p\", null, \"Yes, the definition is very self explanatory. We don\\u2019t have to pass the props to every component and down the component tree. Think of this maintains a global state.\"), mdx(\"p\", null, \"To create a context object, we should use React\\u2019s \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createContext\"), \" method and pass the default value to it (i.e., initial state).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const ThemeContext = React.createContext(initialState)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext\"), \" object contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.Provider\"), \" component, so that the children component can consume the changes / state.\"), mdx(\"p\", null, \"We\\u2019ve pretty much covered the basic of what we need to do further. Let\\u2019s build the application which can toggle between light and dark mode. Please note that once I toggle to a particular mode, next time I visit the application, it should retain the same mode. That is, if I toggled to Light mode, next time I visit, it should display the application in Light mode only. So we\\u2019ll be using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStorage\"), \" to persist the theme selected.\"), mdx(\"p\", null, \"Create a react app:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"create-react-app my-app\\ncd my-app\\nnpm start\\n\")), mdx(\"p\", null, \"Open it in your favorite editor.\"), mdx(\"p\", null, \"Create a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme-context.js\"), \" under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src\"), \" directory.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const themes = {\\n  dark: {\\n    backgroundColor: 'black',\\n    color: 'white'\\n  },\\n  light: {\\n    backgroundColor: 'white',\\n    color: 'black'\\n  }\\n}\\n\")), mdx(\"p\", null, \"I\\u2019m keeping it simple. I\\u2019m maintaining two theme types \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dark\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"light\"), \" with some simple background and foreground colors respectively. So if I toggled to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dark\"), \" mode, then I should my page\\u2019s backgound color is changed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"black\"), \" and foreground color to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"white\"), \" and if light, the other way around.\"), mdx(\"p\", null, \"Next, let me put in my initial state to put it in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createContext\"), \".\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const initialState = {\\n  dark: false,\\n  theme: themes.light,\\n  toggle: () => {}\\n}\\nconst ThemeContext = React.createContext(initialState)\\n\")), mdx(\"p\", null, \"Then, let\\u2019s create a method which wraps all children with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.Provider\"), \" component and export this method and the actual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext\"), \" object that we created just before.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function ThemeProvider({ children }) {\\n  const [dark, setDark] = React.useState(false) // Default theme is light\\n\\n  // On mount, read the preferred theme from the persistence\\n  React.useEffect(() => {\\n    const isDark = localStorage.getItem('dark') === 'true'\\n    setDark(isDark)\\n  }, [dark])\\n\\n  // To toggle between dark and light modes\\n  const toggle = () => {\\n    const isDark = !dark\\n    localStorage.setItem('dark', JSON.stringify(isDark))\\n    setDark(isDark)\\n  }\\n\\n  // Filter the styles based on the theme selected\\n  const theme = dark ? themes.dark : themes.light\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, dark, toggle }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nexport { ThemeProvider }\\n\")), mdx(\"p\", null, \"So the final \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme-context.js\"), \" look like this:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React from 'react'\\n\\nconst themes = {\\n  dark: {\\n    backgroundColor: 'black',\\n    color: 'white'\\n  },\\n  light: {\\n    backgroundColor: 'white',\\n    color: 'black'\\n  }\\n}\\n\\nconst initialState = {\\n  dark: false,\\n  theme: themes.light,\\n  toggle: () => {}\\n}\\nconst ThemeContext = React.createContext(initialState)\\n\\nfunction ThemeProvider({ children }) {\\n  const [dark, setDark] = React.useState(false) // Default theme is light\\n\\n  // On mount, read the preferred theme from the persistence\\n  React.useEffect(() => {\\n    const isDark = localStorage.getItem('dark') === 'true'\\n    setDark(isDark)\\n  }, [dark])\\n\\n  // To toggle between dark and light modes\\n  const toggle = () => {\\n    const isDark = !dark\\n    localStorage.setItem('dark', JSON.stringify(isDark))\\n    setDark(isDark)\\n  }\\n\\n  const theme = dark ? themes.dark : themes.light\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, dark, toggle }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  )\\n}\\n\\nexport { ThemeProvider, ThemeContext }\\n\")), mdx(\"p\", null, \"Open \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" and wrap the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component with our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeProvider\"), \". So that the theme state can be shared with all the children available within \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App\"), \" component.\"), mdx(\"p\", null, \"The modified \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"index.js\"), \" look like:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React from 'react'\\nimport ReactDOM from 'react-dom'\\nimport './index.css'\\nimport App from './App'\\nimport * as serviceWorker from './serviceWorker'\\nimport { ThemeProvider } from './theme-context'\\n\\nReactDOM.render(\\n  <ThemeProvider>\\n    <App />\\n  </ThemeProvider>,\\n  document.getElementById('root')\\n)\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister()\\n\")), mdx(\"p\", null, \"Let\\u2019s go to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \" and add the following before the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"return\"), \" statement:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"const { theme, toggle, dark } = React.useContext(ThemeContext)\\n\")), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useContext\"), \" is the React\\u2019s Hook api which is equivalent to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ThemeContext.Consumer\"), \" component. Read more about it \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://reactjs.org/docs/hooks-reference.html#usecontext\"\n  }), \"here\"), \".\"), mdx(\"p\", null, \"Then add a button before the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<img>\"), \" tag to toggle the theme:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-html\"\n  }), \"<button\\n  type=\\\"button\\\"\\n  onClick={toggle}\\n  style={{\\n    backgroundColor: theme.backgroundColor,\\n    color: theme.color,\\n    outline: 'none'\\n  }}\\n>\\n  Toggle to {!dark ? 'Dark' : 'Light'} theme\\n</button>\\n\")), mdx(\"p\", null, \"Now in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"header\"), \" tag, add the following attribute:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"style={{ backgroundColor: theme.backgroundColor, color: theme.color }}\\n\\n\")), mdx(\"p\", null, \"Take a look at your application (mostly it should be running at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://localhost:3000\"\n  }), \"http://localhost:3000\"), \"). You can see the background color changed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"white\"), \" and the foreground color in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"black\"), \".\"), mdx(\"p\", null, \"Click on the button to toggle between \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Dark\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Light\"), \" mode. You can close and re-open the tab or open a new tab of the same application, the theme mode is persisted.\"), mdx(\"p\", null, \"The entire code of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"App.js\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"import React from 'react'\\nimport logo from './logo.svg'\\nimport './App.css'\\nimport { ThemeContext } from './theme-context'\\n\\nfunction App() {\\n  const { theme, toggle, dark } = React.useContext(ThemeContext)\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <header\\n        className=\\\"App-header\\\"\\n        style={{ backgroundColor: theme.backgroundColor, color: theme.color }}\\n      >\\n        <button\\n          type=\\\"button\\\"\\n          onClick={toggle}\\n          style={{\\n            backgroundColor: theme.backgroundColor,\\n            color: theme.color,\\n            outline: 'none'\\n          }}\\n        >\\n          Toggle to {!dark ? 'Dark' : 'Light'} theme\\n        </button>\\n        <img src={logo} className=\\\"App-logo\\\" alt=\\\"logo\\\" />\\n        <p>\\n          Edit <code>src/App.js</code> and save to reload.\\n        </p>\\n        <a\\n          className=\\\"App-link\\\"\\n          href=\\\"https://reactjs.org\\\"\\n          target=\\\"_blank\\\"\\n          rel=\\\"noopener noreferrer\\\"\\n        >\\n          Learn React\\n        </a>\\n      </header>\\n    </div>\\n  )\\n}\\n\\nexport default App\\n\")), mdx(\"p\", null, \"Demo:\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesandbox.io/s/themecontexthookapi-uumsb?autoresize=1&fontsize=14&module=%2Fsrc%2FApp.js&view=preview\"\n  }), mdx(\"img\", _extends({\n    parentName: \"a\"\n  }, {\n    \"src\": \"https://codesandbox.io/static/img/play-codesandbox.svg\",\n    \"alt\": \"Edit theme-context-hook-api\"\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"},"card":null},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ad362391-f2c8-5d16-ac6b-e2d94a9d4ff8","excerpt":"I was trying to implement the Dark mode to one of the application which I was working. Most of the examples available in Internet usesâ€¦","slug":"/toggle-theme-using-react-hooks/","title":"Toggle theme using React Hooks","date":"May 28, 2019","parent":{"parent":{"relativeDirectory":"toggle-theme-using-react-hooks"}},"relativeDirectory":"toggle-theme-using-react-hooks"}}}